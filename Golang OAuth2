package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"

	oidc "github.com/coreos/go-oidc/v3/oidc"
	"golang.org/x/oauth2"
)

var keycloakClient oauth2.Config
var keycloakVerifier *oidc.IDTokenVerifier

func main() {
	ctx := context.Background()

	configURL := "https://keycloak.spectrumtoolbox.com/auth/realms/spectrumtoolbox"
	clientID := "e2e-test-rodeo"
	clientSecret := "acc896d0-ca6e-4fe4-a0c0-6e91d9d7de2b"
	redirectURL := "http://localhost:5000/demo/callback"

	provider, _ := oidc.NewProvider(ctx, configURL)
	oauth2Config := oauth2.Config{
		ClientID:     clientID,
		ClientSecret: clientSecret,
		RedirectURL:  redirectURL,
		Endpoint:     provider.Endpoint(),
		Scopes:       []string{oidc.ScopeOpenID, "profile", "email"},
	}
	state := "e9f2db40a1a12b1834b4435835ce82b027273343"
	oidcConfig := &oidc.Config{
		ClientID: clientID,
	}
	keycloakVerifier := provider.Verifier(oidcConfig)

	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		rawAccessToken := r.Header.Get("Authorization")
		if rawAccessToken == "" {
			http.Redirect(w, r, oauth2Config.AuthCodeURL(state), http.StatusFound)
			return
		}
		w.Write([]byte("hello world"))
	})

	http.HandleFunc("/demo/callback", func(w http.ResponseWriter, r *http.Request) {
		if r.URL.Query().Get("state") != state {
			http.Error(w, "state did not match", http.StatusBadRequest)
			return
		}

		oauth2Token, err := oauth2Config.Exchange(ctx, r.URL.Query().Get("code"))
		fmt.Println("oauth2Token: ", oauth2Token)
		if err != nil {
			http.Error(w, "Failed to exchange token "+err.Error(), http.StatusInternalServerError)
			return
		}
		rawIDToken, ok := oauth2Token.Extra("id_token").(string)
		fmt.Println("rawIDToken, ", rawIDToken)
		if !ok {
			http.Error(w, "No id_token field in oauth2 token", http.StatusInternalServerError)
			return
		}
		idToken, err := keycloakVerifier.Verify(ctx, rawIDToken)
		fmt.Println("idToken: ", idToken)
		if err != nil {
			http.Error(w, "Failed to verify ID Token: "+err.Error(), http.StatusInternalServerError)
			return
		}

		resp := struct {
			Oauth2Token   *oauth2.Token
			IDTokenClaims *json.RawMessage
		}{oauth2Token, new(json.RawMessage)}

		if err := idToken.Claims(&resp.IDTokenClaims); err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		data, err := json.MarshalIndent(resp, "", "    ")
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		w.Write(data)
	})
	log.Fatal(http.ListenAndServe("localhost:5000", nil))
}
